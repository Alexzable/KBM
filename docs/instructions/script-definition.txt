1. run_app.bat
ðŸ”¹ Main entry point to launch the full development environment.

Steps performed:

Checks if a SQL Server container named sqlserver is already running using docker ps.

If not running, it calls run_sqlserver_docker.bat (with no-wait argument) to start the container.

If running, it immediately calls run_services.bat to launch the .NET services.

Sets the USE_DOCKER_DB=true environment variable so the .NET apps connect to the Docker-based SQL Server.

Waits for user input (X) to shut down the Docker container using docker-compose down.

2. run_sqlserver_docker.bat
ðŸ”¹ Initializes the Docker SQL Server environment.

Steps performed:

Verifies Docker CLI availability (where docker).

Checks if Docker Desktop is running; if not, launches it.

Runs docker-compose up -d to start the SQL Server container in detached mode.

After the container is started, automatically calls run_services.bat to start the gRPC and HTTP services.

Exits with appropriate error codes if Docker is not installed, startup fails, or docker-compose errors.

3. run_services.bat
ðŸ”¹ Starts .NET services after SQL Server is ready.

Steps performed:

Sets USE_DOCKER_DB=true as an environment variable.

Launches:

KBMGrpcService â€“ in a new terminal window.

KBMHttpService â€“ in a new terminal window.

Waits for user input (X) to shut down the Docker container using docker-compose down.

ðŸ§© Additional Details
Assumes the Docker image mcr.microsoft.com/mssql/server:2019-latest is pulled or already available locally.

The SQL Server container is named sqlserver in your docker-compose.yml.

.env file is expected to contain required variables like SA_PASSWORD.