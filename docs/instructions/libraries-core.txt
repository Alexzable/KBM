Used Libraries in .NET Projects (GRPC Server + GRPC Client)
============================================================

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
ðŸ”¹ Project 1: KBMGrpcService (Server-side)
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

1. AutoMapper.Extensions.Microsoft.DependencyInjection
   â†’ Integrates AutoMapper with ASP.NET Core's DI system. Used for mapping between models and DTOs.

2. FluentValidation
   â†’ Provides a fluent interface for model validation.

3. Google.Protobuf
   â†’ Core library for handling Protocol Buffers (required for gRPC).

4. Grpc.AspNetCore
   â†’ Enables building gRPC services on ASP.NET Core.

5. Grpc.Tools
   â†’ Used at build time to compile `.proto` files into C# classes.

6. Microsoft.EntityFrameworkCore.Design
   â†’ Provides EF Core design-time tools (used for migrations).

7. Microsoft.EntityFrameworkCore.SqlServer
   â†’ EF Core provider for SQL Server.

8. Microsoft.EntityFrameworkCore.Tools
   â†’ Command-line tools for managing EF Core migrations and database updates.

9. Serilog.AspNetCore
   â†’ Structured logging integration for ASP.NET Core apps.

10. Serilog.Sinks.Console
    â†’ Enables output of Serilog logs to the console.

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
ðŸ”¹ Project 2: KBMWebClient (Client-side)
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

1. AutoMapper.Extensions.Microsoft.DependencyInjection
   â†’ Same as above, used for mapping in the client context.

2. FluentValidation
   â†’ Input/model validation on the client side.

3. Google.Protobuf
   â†’ Required for deserializing gRPC messages.

4. Grpc.Net.Client
   â†’ Enables gRPC client capabilities in .NET.

5. Grpc.Net.ClientFactory
   â†’ Integrates gRPC clients with ASP.NET Core's IHttpClientFactory.

6. Grpc.Tools
   â†’ Same as on the server side, for building C# code from `.proto` files.

7. Microsoft.AspNetCore.Authentication.JwtBearer
   â†’ JWT Bearer authentication middleware (for securing endpoints).

8. Microsoft.AspNetCore.OpenApi
   â†’ Enables minimal OpenAPI/Swagger support.

9. Serilog.AspNetCore
   â†’ Structured logging integration (same as in server).

10. Swashbuckle.AspNetCore
    â†’ Adds Swagger/OpenAPI generation and UI for ASP.NET Core APIs.

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

ðŸ—‚ Notes:
- Both projects use shared `.proto` files to define gRPC contracts.
- Grpc.Tools is marked as `PrivateAssets=all` â†’ itâ€™s only used during build, not published.

